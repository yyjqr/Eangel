// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotSensorData.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef _FAST_DDS_GENERATED_ROBOTSENSORDATA_H_
#define _FAST_DDS_GENERATED_ROBOTSENSORDATA_H_

#include <array>
#include <bitset>
#include <cstdint>
#include <map>
#include <string>
#include <vector>

#include <fastcdr/cdr/fixed_size_string.hpp>
#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>



#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ROBOTSENSORDATA_SOURCE)
#define ROBOTSENSORDATA_DllAPI __declspec( dllexport )
#else
#define ROBOTSENSORDATA_DllAPI __declspec( dllimport )
#endif // ROBOTSENSORDATA_SOURCE
#else
#define ROBOTSENSORDATA_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ROBOTSENSORDATA_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
class CdrSizeCalculator;
} // namespace fastcdr
} // namespace eprosima





/*!
 * @brief This class represents the structure RobotSensorData defined by the user in the IDL file.
 * @ingroup RobotSensorData
 */
class RobotSensorData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RobotSensorData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RobotSensorData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RobotSensorData that will be copied.
     */
    eProsima_user_DllExport RobotSensorData(
            const RobotSensorData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RobotSensorData that will be copied.
     */
    eProsima_user_DllExport RobotSensorData(
            RobotSensorData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RobotSensorData that will be copied.
     */
    eProsima_user_DllExport RobotSensorData& operator =(
            const RobotSensorData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RobotSensorData that will be copied.
     */
    eProsima_user_DllExport RobotSensorData& operator =(
            RobotSensorData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RobotSensorData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RobotSensorData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RobotSensorData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RobotSensorData& x) const;

    /*!
     * @brief This function sets a value in member index
     * @param _index New value for member index
     */
    eProsima_user_DllExport void index(
            uint32_t _index);

    /*!
     * @brief This function returns the value of member index
     * @return Value of member index
     */
    eProsima_user_DllExport uint32_t index() const;

    /*!
     * @brief This function returns a reference to member index
     * @return Reference to member index
     */
    eProsima_user_DllExport uint32_t& index();


    /*!
     * @brief This function sets a value in member id
     * @param _id New value for member id
     */
    eProsima_user_DllExport void id(
            uint32_t _id);

    /*!
     * @brief This function returns the value of member id
     * @return Value of member id
     */
    eProsima_user_DllExport uint32_t id() const;

    /*!
     * @brief This function returns a reference to member id
     * @return Reference to member id
     */
    eProsima_user_DllExport uint32_t& id();


    /*!
     * @brief This function sets a value in member velocity
     * @param _velocity New value for member velocity
     */
    eProsima_user_DllExport void velocity(
            double _velocity);

    /*!
     * @brief This function returns the value of member velocity
     * @return Value of member velocity
     */
    eProsima_user_DllExport double velocity() const;

    /*!
     * @brief This function returns a reference to member velocity
     * @return Reference to member velocity
     */
    eProsima_user_DllExport double& velocity();


    /*!
     * @brief This function sets a value in member positionX
     * @param _positionX New value for member positionX
     */
    eProsima_user_DllExport void positionX(
            double _positionX);

    /*!
     * @brief This function returns the value of member positionX
     * @return Value of member positionX
     */
    eProsima_user_DllExport double positionX() const;

    /*!
     * @brief This function returns a reference to member positionX
     * @return Reference to member positionX
     */
    eProsima_user_DllExport double& positionX();


    /*!
     * @brief This function sets a value in member positionY
     * @param _positionY New value for member positionY
     */
    eProsima_user_DllExport void positionY(
            double _positionY);

    /*!
     * @brief This function returns the value of member positionY
     * @return Value of member positionY
     */
    eProsima_user_DllExport double positionY() const;

    /*!
     * @brief This function returns a reference to member positionY
     * @return Reference to member positionY
     */
    eProsima_user_DllExport double& positionY();


    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message);

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message);

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const;

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message();

private:

    uint32_t m_index{0};
    uint32_t m_id{0};
    double m_velocity{0.0};
    double m_positionX{0.0};
    double m_positionY{0.0};
    std::string m_message;

};




/*!
 * @brief This class represents the structure RobotFrameInfoData defined by the user in the IDL file.
 * @ingroup RobotSensorData
 */
class RobotFrameInfoData
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport RobotFrameInfoData();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~RobotFrameInfoData();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object RobotFrameInfoData that will be copied.
     */
    eProsima_user_DllExport RobotFrameInfoData(
            const RobotFrameInfoData& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object RobotFrameInfoData that will be copied.
     */
    eProsima_user_DllExport RobotFrameInfoData(
            RobotFrameInfoData&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object RobotFrameInfoData that will be copied.
     */
    eProsima_user_DllExport RobotFrameInfoData& operator =(
            const RobotFrameInfoData& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object RobotFrameInfoData that will be copied.
     */
    eProsima_user_DllExport RobotFrameInfoData& operator =(
            RobotFrameInfoData&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x RobotFrameInfoData object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const RobotFrameInfoData& x) const;

    /*!
     * @brief Comparison operator.
     * @param x RobotFrameInfoData object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const RobotFrameInfoData& x) const;

    /*!
     * @brief This function copies the value in member m_vec_Robot_Info
     * @param _m_vec_Robot_Info New value to be copied in member m_vec_Robot_Info
     */
    eProsima_user_DllExport void m_vec_Robot_Info(
            const std::vector<RobotSensorData>& _m_vec_Robot_Info);

    /*!
     * @brief This function moves the value in member m_vec_Robot_Info
     * @param _m_vec_Robot_Info New value to be moved in member m_vec_Robot_Info
     */
    eProsima_user_DllExport void m_vec_Robot_Info(
            std::vector<RobotSensorData>&& _m_vec_Robot_Info);

    /*!
     * @brief This function returns a constant reference to member m_vec_Robot_Info
     * @return Constant reference to member m_vec_Robot_Info
     */
    eProsima_user_DllExport const std::vector<RobotSensorData>& m_vec_Robot_Info() const;

    /*!
     * @brief This function returns a reference to member m_vec_Robot_Info
     * @return Reference to member m_vec_Robot_Info
     */
    eProsima_user_DllExport std::vector<RobotSensorData>& m_vec_Robot_Info();

private:

    std::vector<RobotSensorData> m_m_vec_Robot_Info;

};

#endif // _FAST_DDS_GENERATED_ROBOTSENSORDATA_H_



