// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file RobotSensorData.cpp
 * This source file contains the implementation of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "RobotSensorData.h"

#include <fastcdr/Cdr.h>


#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




RobotSensorData::RobotSensorData()
{
}

RobotSensorData::~RobotSensorData()
{
}

RobotSensorData::RobotSensorData(
        const RobotSensorData& x)
{
    m_index = x.m_index;
    m_id = x.m_id;
    m_velocity = x.m_velocity;
    m_positionX = x.m_positionX;
    m_positionY = x.m_positionY;
    m_message = x.m_message;
}

RobotSensorData::RobotSensorData(
        RobotSensorData&& x) noexcept
{
    m_index = x.m_index;
    m_id = x.m_id;
    m_velocity = x.m_velocity;
    m_positionX = x.m_positionX;
    m_positionY = x.m_positionY;
    m_message = std::move(x.m_message);
}

RobotSensorData& RobotSensorData::operator =(
        const RobotSensorData& x)
{

    m_index = x.m_index;
    m_id = x.m_id;
    m_velocity = x.m_velocity;
    m_positionX = x.m_positionX;
    m_positionY = x.m_positionY;
    m_message = x.m_message;
    return *this;
}

RobotSensorData& RobotSensorData::operator =(
        RobotSensorData&& x) noexcept
{

    m_index = x.m_index;
    m_id = x.m_id;
    m_velocity = x.m_velocity;
    m_positionX = x.m_positionX;
    m_positionY = x.m_positionY;
    m_message = std::move(x.m_message);
    return *this;
}

bool RobotSensorData::operator ==(
        const RobotSensorData& x) const
{
    return (m_index == x.m_index &&
           m_id == x.m_id &&
           m_velocity == x.m_velocity &&
           m_positionX == x.m_positionX &&
           m_positionY == x.m_positionY &&
           m_message == x.m_message);
}

bool RobotSensorData::operator !=(
        const RobotSensorData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void RobotSensorData::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t RobotSensorData::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& RobotSensorData::index()
{
    return m_index;
}


/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void RobotSensorData::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t RobotSensorData::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& RobotSensorData::id()
{
    return m_id;
}


/*!
 * @brief This function sets a value in member velocity
 * @param _velocity New value for member velocity
 */
void RobotSensorData::velocity(
        double _velocity)
{
    m_velocity = _velocity;
}

/*!
 * @brief This function returns the value of member velocity
 * @return Value of member velocity
 */
double RobotSensorData::velocity() const
{
    return m_velocity;
}

/*!
 * @brief This function returns a reference to member velocity
 * @return Reference to member velocity
 */
double& RobotSensorData::velocity()
{
    return m_velocity;
}


/*!
 * @brief This function sets a value in member positionX
 * @param _positionX New value for member positionX
 */
void RobotSensorData::positionX(
        double _positionX)
{
    m_positionX = _positionX;
}

/*!
 * @brief This function returns the value of member positionX
 * @return Value of member positionX
 */
double RobotSensorData::positionX() const
{
    return m_positionX;
}

/*!
 * @brief This function returns a reference to member positionX
 * @return Reference to member positionX
 */
double& RobotSensorData::positionX()
{
    return m_positionX;
}


/*!
 * @brief This function sets a value in member positionY
 * @param _positionY New value for member positionY
 */
void RobotSensorData::positionY(
        double _positionY)
{
    m_positionY = _positionY;
}

/*!
 * @brief This function returns the value of member positionY
 * @return Value of member positionY
 */
double RobotSensorData::positionY() const
{
    return m_positionY;
}

/*!
 * @brief This function returns a reference to member positionY
 * @return Reference to member positionY
 */
double& RobotSensorData::positionY()
{
    return m_positionY;
}


/*!
 * @brief This function copies the value in member message
 * @param _message New value to be copied in member message
 */
void RobotSensorData::message(
        const std::string& _message)
{
    m_message = _message;
}

/*!
 * @brief This function moves the value in member message
 * @param _message New value to be moved in member message
 */
void RobotSensorData::message(
        std::string&& _message)
{
    m_message = std::move(_message);
}

/*!
 * @brief This function returns a constant reference to member message
 * @return Constant reference to member message
 */
const std::string& RobotSensorData::message() const
{
    return m_message;
}

/*!
 * @brief This function returns a reference to member message
 * @return Reference to member message
 */
std::string& RobotSensorData::message()
{
    return m_message;
}






RobotFrameInfoData::RobotFrameInfoData()
{
}

RobotFrameInfoData::~RobotFrameInfoData()
{
}

RobotFrameInfoData::RobotFrameInfoData(
        const RobotFrameInfoData& x)
{
    m_m_vec_Robot_Info = x.m_m_vec_Robot_Info;
}

RobotFrameInfoData::RobotFrameInfoData(
        RobotFrameInfoData&& x) noexcept
{
    m_m_vec_Robot_Info = std::move(x.m_m_vec_Robot_Info);
}

RobotFrameInfoData& RobotFrameInfoData::operator =(
        const RobotFrameInfoData& x)
{

    m_m_vec_Robot_Info = x.m_m_vec_Robot_Info;
    return *this;
}

RobotFrameInfoData& RobotFrameInfoData::operator =(
        RobotFrameInfoData&& x) noexcept
{

    m_m_vec_Robot_Info = std::move(x.m_m_vec_Robot_Info);
    return *this;
}

bool RobotFrameInfoData::operator ==(
        const RobotFrameInfoData& x) const
{
    return (m_m_vec_Robot_Info == x.m_m_vec_Robot_Info);
}

bool RobotFrameInfoData::operator !=(
        const RobotFrameInfoData& x) const
{
    return !(*this == x);
}

/*!
 * @brief This function copies the value in member m_vec_Robot_Info
 * @param _m_vec_Robot_Info New value to be copied in member m_vec_Robot_Info
 */
void RobotFrameInfoData::m_vec_Robot_Info(
        const std::vector<RobotSensorData>& _m_vec_Robot_Info)
{
    m_m_vec_Robot_Info = _m_vec_Robot_Info;
}

/*!
 * @brief This function moves the value in member m_vec_Robot_Info
 * @param _m_vec_Robot_Info New value to be moved in member m_vec_Robot_Info
 */
void RobotFrameInfoData::m_vec_Robot_Info(
        std::vector<RobotSensorData>&& _m_vec_Robot_Info)
{
    m_m_vec_Robot_Info = std::move(_m_vec_Robot_Info);
}

/*!
 * @brief This function returns a constant reference to member m_vec_Robot_Info
 * @return Constant reference to member m_vec_Robot_Info
 */
const std::vector<RobotSensorData>& RobotFrameInfoData::m_vec_Robot_Info() const
{
    return m_m_vec_Robot_Info;
}

/*!
 * @brief This function returns a reference to member m_vec_Robot_Info
 * @return Reference to member m_vec_Robot_Info
 */
std::vector<RobotSensorData>& RobotFrameInfoData::m_vec_Robot_Info()
{
    return m_m_vec_Robot_Info;
}


// Include auxiliary functions like for serializing/deserializing.
#include "RobotSensorDataCdrAux.ipp"

